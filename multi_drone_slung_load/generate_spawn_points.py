# Script to generate drone poses for a desired starting arrangement of drones
# Note: The compiled .so file generated by frame_transforms must be in the same directory as this file
# 
# Author: Harvey Merton 
# Date: 07/07/2021

import numpy as np
#import quaternionic as quaternion 
import quaternion
import math

import utils
import frame_transforms as ft


def main(): 
    # Set up
    num_drones = 3

    drones_pos = [np.array([0,0,0]) for i in range(num_drones)]
    drones_att = [np.quaternion(*[1,0,0,0]) for i in range(num_drones)]

    tethers_pos = [np.array([0,0,0]) for i in range(num_drones)]
    tethers_att = [np.quaternion(*[1,0,0,0]) for i in range(num_drones)]
    
    # Default starting positions in ENU
    drones_pos[0] = np.array([1.5, 0, .24])
    drones_att[0] = np.quaternion(*ft.quaternion_from_euler(0, 0, 0))

    drones_pos[1] = np.array([-0.75, 1.3, .24])
    drones_att[1] = np.quaternion(*ft.quaternion_from_euler(0, 0, 0))

    drones_pos[2] = np.array([-0.75, -1.3, .24])
    drones_att[2] = np.quaternion(*ft.quaternion_from_euler(0, 0, 0))


    tethers_pos[0] = np.array([0.08, 0, .2])
    tethers_att[0] = np.quaternion(*ft.quaternion_from_euler(0, 0, 0))

    tethers_pos[1] = np.array([-0.04, 0.069, .2])
    tethers_att[1] = np.quaternion(*ft.quaternion_from_euler(0, 0, 2.09439510239))

    tethers_pos[2] = np.array([-0.04, -0.069, .2])
    tethers_att[2] = np.quaternion(*ft.quaternion_from_euler(0, 0, 4.18879020479))


    # Desired load pose
    # Translated and rotated over 90 deg CW
    # load_pos = np.array([10, -5, 0])
    # load_att = np.quaternion(*ft.quaternion_from_euler(0, 0, -math.pi/2 - 0.5))

    # Translated and rotated over 180 deg CCW
    load_pos = np.array([-2.5, -15, 0])
    load_att = np.quaternion(*ft.quaternion_from_euler(0, 0, math.pi + 0.3))


    # Translate drone poses by desired load pose
    drones_pos_transformed = drones_pos.copy()
    drones_att_transformed = drones_att.copy()
    drones_yaw_transformed = [0.0 for i in range(num_drones)]

    tethers_pos_transformed = tethers_pos.copy()
    tethers_att_transformed = tethers_att.copy()
    tethers_yaw_transformed = [0.0 for i in range(num_drones)]

    print(f'Load pose: {load_pos[0]} {load_pos[1]} {load_pos[2]} 0 0 {ft.quaternion_get_yaw(load_att)} \n')

    for i in range(num_drones):
        drones_pos_transformed[i] = utils.transform_position(drones_pos[i], load_pos, load_att)
        drones_att_transformed[i] = utils.transform_orientation(drones_att[i], load_att)
        drones_yaw_transformed[i] = ft.quaternion_get_yaw(drones_att_transformed[i])

        tethers_pos_transformed[i] = utils.transform_position(tethers_pos[i], load_pos, load_att)
        tethers_att_transformed[i] = utils.transform_orientation(tethers_att[i], load_att)
        tethers_yaw_transformed[i] = ft.quaternion_get_yaw(tethers_att_transformed[i])

        print(f'Drone {i+1} pose: {drones_pos_transformed[i][0]} {drones_pos_transformed[i][1]} {drones_pos_transformed[i][2]} 0 0 {drones_yaw_transformed[i]}')
        print(f'Tether {i+1} pose: {tethers_pos_transformed[i][0]} {tethers_pos_transformed[i][1]} {tethers_pos_transformed[i][2]} 0 0 {tethers_yaw_transformed[i]} \n')


if __name__ == '__main__':
    main()